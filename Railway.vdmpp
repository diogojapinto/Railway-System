class Railway
types
	public Direction = <CLOCKWISE> | <COUNTER_CLOCKWISE>;
	public Train :: id  : token
									dir : Direction;
values
instance variables
	public static trainCounter: nat := 0;
	
	private isClosed: bool := false;
	
	public trackElements: seq of TrackElement := [];
	private trains: set of Train := {};
operations

	--------------------
	--   Build ops    --
	--------------------
	
	public appendTrackElement: TrackElement ==> ()
	appendTrackElement(newTrackElem) == (
		if len trackElements <> 0 then (
			-- set elements ordering
			newTrackElem.nextCounterClockwise := hd reverse trackElements;
			trackElements(len trackElements - 1).nextClockwise := newTrackElem;
		);
		
		-- add to sequence
		trackElements := trackElements ^ [newTrackElem];
	)
	pre
		if isofclass(Station, trackElements(len trackElements - 1)) then not isofclass(Station, newTrackElem)
		else	true
	post
		len trackElements = len trackElements~ + 1 and
		trackElements(len trackElements - 2).nextCounterClockwise = trackElements(len trackElements - 2).nextClockwise;
		
	public closeTrack: () ==> seq of TrackElement
	closeTrack() == (
		trackElements(len trackElements - 1).nextClockwise := trackElements(0);
		return trackElements;
	);
	
	public placeTrain: nat * Direction ==> ()
	placeTrain(index, dir) == (
		dcl newTrain: Train := mk_Train(mk_token(trainCounter), dir);
		trainCounter := trainCounter + 1;
		
		trackElements(index).placeTrain(newTrain);
	);
	
functions
traces
end Railway