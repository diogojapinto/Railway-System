class RailwaySystemTest is subclass of Tester
	instance variables
		railWay : Railway := new Railway();
		b1 : TrackElement := new Block();
		b2 : TrackElement := new Block();
		b3 : TrackElement := new Block();
		b4 : TrackElement := new Block();
		b5 : TrackElement := new Block();
		s1 : TrackElement := new Station();
		s2 : TrackElement := new Station();
		s3 : TrackElement := new Station();
		dummy : seq of TrackElement;
   	testRes : bool;
   	train: Railway`Train;
   	train2: Railway`Train;
   	
		
	operations
	
    ----- Initialize all variables -----
    private restartVariables: () ==> ()
    restartVariables() == 
    (
    	railWay := new Railway();
			b1 := new Block();
			b2 := new Block();
			b3 := new Block();
			b4 := new Block();
			b5 := new Block();
			s1 := new Station();
			s2 := new Station();
			s3 := new Station();
    );
    
    ----- Test "Cant append two adjacent stations" 	-----
    private testSubsequentStations: () ==> ()
    testSubsequentStations() ==
    (
    	IO`print("\n\nTest to prove two stations can't be placed next to each other without a block between them.\n");
    	IO`print("Precondition in appendTrackElement fails because if the previous track element is a station the next track element cannot be a station.\n");
    	restartVariables();
    	railWay.appendTrackElement(b1);
    	railWay.appendTrackElement(s1);
    	railWay.appendTrackElement(s2);
    );

  
   ----- Test " Cant close track with one station in the beginning and other and the end ( two adjacent stations)  -----
    private testCloseTrack: () ==> ()
    testCloseTrack() ==
   	(
   		dcl tracks: seq of TrackElement;
    	IO`print("\n\nTest to prove you can't close a track with stations on both ends. closeTrack connects the last element in the sequence of track elements to the first one.\n");
    	IO`print("Invariants in lines 10 and 11 in the Station file state a station must be surrounded by blocks.\n");
   		restartVariables();
   		railWay.appendTrackElement(s1);
   		railWay.appendTrackElement(b1);
   		railWay.appendTrackElement(b4);
  		railWay.appendTrackElement(s2);
 			tracks := railWay.closeTrack();
 			
   	);
    
    ----- Test "A valid railway" -----	
    private testValidRailway: () ==> ()
    testValidRailway() ==
    (
    	dcl tracks: seq of TrackElement;
    	IO`print("\n\nTest to show the creation of a valid RailWay\n");
    	IO`print("Two stations are place separated by one block from each other in either direction.\n");
   		restartVariables();
    	railWay.appendTrackElement(b1);
    	railWay.appendTrackElement(s1);
    	railWay.appendTrackElement(b4);
    	railWay.appendTrackElement(s2);
    	tracks := railWay.closeTrack();
    	assertTrue(len railWay.trackElements = 4);
    	assertTrue(tracks = [b1, s1, b4, s2]);
    );
    
		----- Test "Semaphores YELLOW before a station" -----	
		testSemaphoreBeforeStation() ==
   	(
   		dcl tracks: seq of TrackElement;
    	IO`print("\n\nTest to show the semaphore is always yellow before a station, unless it's the first block after a station.\n");
    	IO`print("Structured this way because a semaphore after a station is always red until a train asks permission to leave that station.\n");
   		restartVariables();
   		railWay.appendTrackElement(b1);
   		railWay.appendTrackElement(b2);
   		railWay.appendTrackElement(s1);
   		railWay.appendTrackElement(b4);
   		railWay.appendTrackElement(s2);
   		tracks := railWay.closeTrack();
   		assertTrue(b2.semaphoreClockwise = <YELLOW>);
   		assertTrue(b4.semaphoreClockwise = <RED>); -- Red because it's after a station
   		assertTrue(b2.semaphoreCounterClockwise = <RED>); -- Red because it's after a station
   		assertTrue(b1.semaphoreCounterClockwise = <YELLOW>);
   	);
   	
   	----- Test "Placing a train" -----	
   	testTrainPlacement() ==
   	(
   		dcl tracks: seq of TrackElement;
    	IO`print("\n\nTest to show the creation of a valid RailWay\n");
    	IO`print("Two stations are place separated by one block from each other in either direction.\n");   		
   		restartVariables();
   		railWay.appendTrackElement(b1);
   		railWay.appendTrackElement(b3);
   		railWay.appendTrackElement(s1);
   		railWay.appendTrackElement(b4);
   		railWay.appendTrackElement(b5);
   		tracks := railWay.closeTrack();
   		
   		train := railWay.placeTrain(3,<CLOCKWISE>);
   		assertTrue(s1.hasAnyTrain());
   		
   	);
   	
   	----- Test "Placing a train" -----	
   	testTrainPlacementFail() ==
   	(
   		dcl tracks: seq of TrackElement;
    	IO`print("\n\nTest to show the creation of a valid RailWay\n");
    	IO`print("Two stations are place separated by one block from each other in either direction.\n");   		
   		restartVariables();
   		railWay.appendTrackElement(b1);
   		railWay.appendTrackElement(b3);
   		railWay.appendTrackElement(s1);
   		railWay.appendTrackElement(b4);
   		railWay.appendTrackElement(b5);
   		tracks := railWay.closeTrack();
   		
   		train := railWay.placeTrain(1,<CLOCKWISE>); -- Fails here because you can't place train in block
   		assertTrue(s1.hasAnyTrain());
   		
   	);
    
    ----- Test "Semaphores colors in a empty track" -----	
    testSemaphoreEmptyTrack() ==
   	(
   		dcl tracks: seq of TrackElement;
   		
   		restartVariables();
   		railWay.appendTrackElement(b1);
   		railWay.appendTrackElement(b3);
   		railWay.appendTrackElement(b2);
   		railWay.appendTrackElement(s1);
   		railWay.appendTrackElement(b4);
   		railWay.appendTrackElement(s2);
   		tracks := railWay.closeTrack();
   		
   		assertTrue(s1.semaphoreClockwise = <YELLOW>);
   		assertTrue(s1.semaphoreCounterClockwise = <YELLOW>);
   		
   		assertTrue(b3.semaphoreCounterClockwise = <GREEN>);
   		assertTrue(b3.semaphoreCounterClockwise = <GREEN>);
   		
   		assertTrue(b4.semaphoreCounterClockwise = <RED>);
   		assertTrue(b2.semaphoreClockwise = <RED>);
   	);
   	
   	 ----- Test "Semaphores colors with a train in the track" -----	
   	testSemaphoreTrains() ==
   	(
   		dcl tracks: seq of TrackElement;
   		
   		restartVariables();
   		railWay.appendTrackElement(b1);
   		railWay.appendTrackElement(b3);
   		railWay.appendTrackElement(b2);
   		railWay.appendTrackElement(s1);
   		railWay.appendTrackElement(b4);
   		railWay.appendTrackElement(s2);
   		tracks := railWay.closeTrack();
   		train := railWay.placeTrain(4, <CLOCKWISE>);
   		
   		assertTrue(s1.semaphoreClockwise = <YELLOW>);
   		assertTrue(s1.semaphoreCounterClockwise = <RED>);
   		
   		assertTrue(b2.semaphoreClockwise = <RED>);
   		assertTrue(b2.semaphoreCounterClockwise = <YELLOW>);
   		
   		assertTrue(b3.semaphoreClockwise = <GREEN>);
   		assertTrue(b3.semaphoreCounterClockwise = <GREEN>);
   		
   		assertTrue(b4.semaphoreClockwise = <RED>);
   		assertTrue(b4.semaphoreCounterClockwise = <RED>);
   		
   	);
   	 
   	 ----- Test "Semaphores colors when a train asks to leave the station" -----	 	
   	testPermissionToLeave() ==
   	(
   		dcl tracks: seq of TrackElement;
   		
   		restartVariables();
   		railWay.appendTrackElement(b1);
   		railWay.appendTrackElement(b3);
   		railWay.appendTrackElement(b2);
   		railWay.appendTrackElement(s1);
   		railWay.appendTrackElement(b4);
   		railWay.appendTrackElement(s2);
   		tracks := railWay.closeTrack();
   		train := railWay.placeTrain(4, <CLOCKWISE>);
   		
   		assertTrue(s1.semaphoreClockwise = <RED>);
   		assertTrue(s1.semaphoreCounterClockwise = <YELLOW>);
   		
   		assertTrue(b2.semaphoreClockwise = <YELLOW>);
   		assertTrue(b2.semaphoreCounterClockwise = <RED>);
   		
   		assertTrue(b3.semaphoreClockwise = <GREEN>);
   		assertTrue(b3.semaphoreCounterClockwise = <GREEN>);
   		
   		assertTrue(b4.semaphoreClockwise = <RED>);
   		assertTrue(b4.semaphoreCounterClockwise = <RED>);
   		
   		assertTrue(railWay.askToLeaveStation(train));
   		
   		assertTrue(b4.semaphoreClockwise = <GREEN>);   		
   	);
    
     ----- Test "There cant be 2 trains between stations ( They dont have permission to leave)" -----	
   	testTrainsBetweenStations() ==
   	(
   		dcl tracks: seq of TrackElement;
   		
   		restartVariables();
   		
   		railWay.appendTrackElement(b1);
   		railWay.appendTrackElement(b3);
   		railWay.appendTrackElement(b2);
   		railWay.appendTrackElement(s1);
   		railWay.appendTrackElement(b4);
   		railWay.appendTrackElement(s2);
   		tracks := railWay.closeTrack();
   		train := railWay.placeTrain(4, <CLOCKWISE>);
   		train2 := railWay.placeTrain(6, <COUNTER_CLOCKWISE>);   		
   		
 	   	assertTrue(s1.hasAnyTrain());
 	   	assertTrue(s2.hasAnyTrain());
   		assertTrue(railWay.askToLeaveStation(train));
   	
   		assertTrue(railWay.askToLeaveStation(train2)); -- e suposto falhar porque so 1 pode pedir autorizacao
   	
   	  railWay.advanceIter({train,train2});
   	  
 	   	assertTrue(b4.hasAnyTrain());
 	    assertTrue(railWay.askToLeaveStation(train2)); -- e suposto falhar 		
   	);
   	
   	 ----- Test "Two trains in the track advancing an iteration, in two different directions ERROR!!!!!!!!!!!!" -----	
   	  testIterTwoTrains() ==
   	(
   		dcl tracks: seq of TrackElement;
   		
   		restartVariables();
   		
   		railWay.appendTrackElement(b1);
   		railWay.appendTrackElement(b3);
   		railWay.appendTrackElement(s3);
   		railWay.appendTrackElement(b2);
   		railWay.appendTrackElement(s1);
   		railWay.appendTrackElement(b4);
   		railWay.appendTrackElement(s2);
   		tracks := railWay.closeTrack();
   		
   		train := railWay.placeTrain(5, <COUNTER_CLOCKWISE>);
   		train2 := railWay.placeTrain(7, <CLOCKWISE>);   		
   		
 	   	assertTrue(s1.hasAnyTrain());
 	   	assertTrue(s2.hasAnyTrain());
   		assertTrue(railWay.askToLeaveStation(train));
   		assertTrue(railWay.askToLeaveStation(train2));
   	
   		railWay.advanceIter({train,train2});

 	   	assertTrue(b2.hasAnyTrain());
 	   	assertTrue(b1.hasAnyTrain());
 		
   	);
   	
   	 ----- Test "Semaphores is red before entering a station where is a train there already " -----	
  	 	testStopsAtRed() ==
   	(
   		dcl tracks: seq of TrackElement;
   		
   		restartVariables();
   		railWay.appendTrackElement(b1);
   		railWay.appendTrackElement(b3);
   		railWay.appendTrackElement(s1);
   		railWay.appendTrackElement(b4);
   		railWay.appendTrackElement(s2);
   		railWay.appendTrackElement(b2);
   		
   		tracks := railWay.closeTrack();  
   		
   		train := railWay.placeTrain(3, <CLOCKWISE>);
   		train2 := railWay.placeTrain(5, <CLOCKWISE>);   		
   		
   		assertTrue(s1.hasAnyTrain());
 	   	assertTrue(s2.hasAnyTrain());
 	   	assertTrue(b4.semaphoreClockwise = <RED>);
   		assertTrue(railWay.askToLeaveStation(train));
   		assertTrue(b4.semaphoreClockwise = <YELLOW>);   
   		
   		railWay.advanceIter({train});
   		assertTrue(b4.hasCTrain()); 
   		assertTrue(s2.semaphoreClockwise = <RED>); 
   		
   		railWay.advanceIter({train});
   		assertTrue(b4.hasCTrain()); 
   		
   	);
   	
   	-- Train asks permission but is not granted because it has a train ahead
   		PermissionNotGranted() ==
   	(
   		dcl tracks: seq of TrackElement;
   		
   		restartVariables();
   		railWay.appendTrackElement(b1);
   		railWay.appendTrackElement(s1);
   		railWay.appendTrackElement(b4);
   		railWay.appendTrackElement(s2);
   		railWay.appendTrackElement(b2);
   		
   		tracks := railWay.closeTrack();  
   		
   		train := railWay.placeTrain(2, <CLOCKWISE>);
   		train2 := railWay.placeTrain(4, <CLOCKWISE>);   		
   		assertTrue(railWay.askToLeaveStation(train));
   		railWay.advanceIter({train});
   		assertTrue(b4.hasAnyTrain());
   		assertTrue(railWay.askToLeaveStation(train2));

  		railWay.advanceIter({train2,train});
   		assertTrue(s2.hasAnyTrain());
   		assertTrue(b2.hasAnyTrain());
   	);
   	
   	-- Test "two trains in the same station ( two block per station)"
   	 	twoTrainsInStation() ==
   	(
   		dcl tracks: seq of TrackElement;
   		restartVariables();
   		
   		railWay.appendTrackElement(b1);
   		railWay.appendTrackElement(s1);
   		railWay.appendTrackElement(b4);
   		
   		tracks := railWay.closeTrack();  
 	
   		train := railWay.placeTrain(2, <CLOCKWISE>);
   		train2 := railWay.placeTrain(2, <COUNTER_CLOCKWISE>);   		
   		assertTrue(s1.hasCTrain());
			assertTrue(s1.hasCCTrain());

   	);
   	
   	
    public static main: () ==> ()
    main() ==
    (
      dcl tester: RailwaySystemTest := new RailwaySystemTest();
      
      tester.testTrainPlacement();
			/*tester.testSemaphoreBeforeStation();      
      tester.testValidRailway();
      tester.testPermissionToLeave();
      tester.testIterTwoTrains();
      tester.testStopsAtRed();
      tester.twoTrainsInStation();
      tester.PermissionNotGranted();*/
      
      
      -- tester.testTrainsBetweenStations();
      -- tester.testSubsequentStations();
  	  -- tester.testCloseTrack();
    );
    
end RailwaySystemTest