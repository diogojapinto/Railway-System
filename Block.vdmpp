class Block is subclass of TrackElement
types
values
instance variables
	public train: [Railway`Train] := nil;
	
	-- Not viable if block is surrounded by Stations
	-- inv isofclass(Station, nextClockwise) => semaphoreClockwise <> <GREEN>;
	-- inv isofclass(Station, nextCounterClockwise) => semaphoreCounterClockwise <> <GREEN>;
	
operations
	-- only one train per block
	public placeTrain: Railway`Train ==> ()
	placeTrain(newTrain) == (
		setCSemaphore(<RED>);
		setCCSemaphore(<RED>);
		train := newTrain;
	)
	pre
		train = nil
	post
		train <> nil;
		
	public removeTrain: Railway`Train ==> ()
	removeTrain(trainVar) == (
		train := nil;
		if isofclass(Station, nextClockwise) or nextClockwise.isSemaphoreRed(<CLOCKWISE>) then
			setCSemaphore(<YELLOW>)
		else
			setCSemaphore(<GREEN>);
		
		if isofclass(Station, nextCounterClockwise) or nextCounterClockwise.isSemaphoreRed(<COUNTER_CLOCKWISE>) then
			setCCSemaphore(<YELLOW>)
		else
			setCCSemaphore(<GREEN>);
	)
	pre
		train = trainVar;
	
	public hasAnyTrain: () ==> bool
	hasAnyTrain() ==
		return train <> nil;
		
	public hasTrain: Railway`Train ==> bool
	hasTrain(trainVar) ==
		return train = trainVar;
	
	public hasCTrain: () ==> bool
	hasCTrain() ==
		return train <> nil => train.dir = <CLOCKWISE>;
		
	public hasCCTrain: () ==> bool
	hasCCTrain() ==
		return train <> nil => train.dir = <COUNTER_CLOCKWISE>;
	
	public initSemaphores: () ==> ()
	initSemaphores() ==
		if hasAnyTrain() then (
			setCSemaphore(<RED>);
			setCCSemaphore(<RED>);
		)
		else (
			if isofclass(Station, nextCounterClockwise) then
				setCSemaphore(<RED>)
			else if nextClockwise.isSemaphoreRed(<CLOCKWISE>) or isofclass(Station, nextClockwise) then (
				setCSemaphore(<YELLOW>);
			)
			else
				setCSemaphore(<GREEN>);
		
			if isofclass(Station, nextClockwise) then
				setCCSemaphore(<RED>)
			else if nextCounterClockwise.isSemaphoreRed(<COUNTER_CLOCKWISE>) or isofclass(Station, nextCounterClockwise) then
				setCCSemaphore(<YELLOW>)
			else 
				setCCSemaphore(<GREEN>);
		)
		
functions
traces
end Block