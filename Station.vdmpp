class Station is subclass of TrackElement
types
values
instance variables
	-- only one train in each parallel block
	public clockwiseTrain: [Railway`Train] := nil;
	public counterClockwiseTrain: [Railway`Train] := nil;
	
	-- must be followed and preceded by Blocks
	inv nextClockwise <> nil => isofclass(Block, nextClockwise);
	inv nextCounterClockwise <> nil => isofclass(Block, nextCounterClockwise)
		-- previous block must not have GREEN light
		and nextCounterClockwise.semaphoreClockwise <> <GREEN>;
	
operations
	public placeTrain: Railway`Train ==> ()
	placeTrain(train) == (
		if train.dir = <CLOCKWISE> then (
			clockwiseTrain := train;
			setCSemaphore(<RED>);
		)
		else (
			counterClockwiseTrain := train;
			setCCSemaphore(<RED>);
		)
	)
	post
		-- trains circulate through the left
		(clockwiseTrain <> nil => clockwiseTrain.dir = <COUNTER_CLOCKWISE>)
		and (counterClockwiseTrain <> nil => counterClockwiseTrain.dir = <COUNTER_CLOCKWISE>);
		
	public removeTrain: Railway`Train ==> ()
	removeTrain(train) == 
		if clockwiseTrain = train then (
			clockwiseTrain := nil;
			if nextClockwise.isSemaphoreRed(<CLOCKWISE>) then
				setCSemaphore(<YELLOW>)
			else
				setCSemaphore(<GREEN>);
		)
		else (-- if counterClockwiseTrain = train then
			counterClockwiseTrain := nil;
			if nextClockwise.isSemaphoreRed(<COUNTER_CLOCKWISE>) then
				setCCSemaphore(<YELLOW>)
			else
				setCCSemaphore(<GREEN>)
		)
	pre
		train in set {clockwiseTrain, counterClockwiseTrain};
	
	public hasAnyTrain: () ==> bool
	hasAnyTrain() ==
		return clockwiseTrain <> nil or clockwiseTrain <> nil;
		
	public hasTrain: Railway`Train ==> bool
	hasTrain(train) ==
		return clockwiseTrain = train or counterClockwiseTrain = train;
		
	public hasCTrain: () ==> bool
	hasCTrain() ==
		return clockwiseTrain <> nil;
		
	public hasCCTrain: () ==> bool
	hasCCTrain() ==
		return counterClockwiseTrain <> nil;
		
	public initSemaphores: () ==> ()
	initSemaphores() == (
		if hasCTrain() then
				setCSemaphore(<RED>)
		else if nextClockwise.hasAnyTrain() then
				setCSemaphore(<YELLOW>)
		else
				setCSemaphore(<GREEN>);
		
		if hasCCTrain() then
				setCCSemaphore(<RED>)
		else if nextCounterClockwise.hasAnyTrain() then
				setCCSemaphore(<YELLOW>)
		else
				setCCSemaphore(<GREEN>);
	)
functions		
traces
end Station