class TrackElement
types
	public SemaphoreLight = <GREEN> | <YELLOW> | <RED>;
values
instance variables
	public nextClockwise: [TrackElement] := nil;
	public nextCounterClockwise: [TrackElement] := nil;
	
	public semaphoreClockwise: SemaphoreLight := <RED>;
	public semaphoreCounterClockwise: SemaphoreLight := <RED>;
	
operations
	-- places a train in the the corresponding block
	public placeTrain: Railway`Train ==> ()
	placeTrain(train) ==
		is subclass responsibility;
		
	-- return true if any has train
	public hasAnyTrain: () ==> bool
	hasAnyTrain() ==
		is subclass responsibility;
		
	
	-- return true if has the specified train
	public hasTrain: Railway`Train ==> bool
	hasTrain(train) ==
		is subclass responsibility;
		
	public removeTrain: Railway`Train ==> ()
	removeTrain(train) == 
		is subclass responsibility;
		
	-- return the light of the clockwise semaphore
	public setCSemaphore: SemaphoreLight ==> ()
	setCSemaphore(light) == (
		semaphoreClockwise := light;
	)
	pre light = <GREEN> => nextClockwise.semaphoreClockwise <> <RED>;
	
	-- return the light of the counter-clockwise semaphore
	public setCCSemaphore: SemaphoreLight ==> ()
	setCCSemaphore(light) == (
		semaphoreCounterClockwise := light;
	)
	pre light = <GREEN> => nextCounterClockwise.semaphoreCounterClockwise <> <RED>;
	
	public initSemaphores: () ==> ()
	initSemaphores() ==
		is subclass responsibility;
	
	public isSemaphoreRed: Railway`Direction ==> ()
	isSemaphoreRed(dir) ==
		if dir = <CLOCKWISE> then
			return semaphoreClockwise = <RED>
		else
			return semaphoreCounterClockwise = <RED>;
	
functions
traces
end TrackElement